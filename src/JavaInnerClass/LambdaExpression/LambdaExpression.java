package JavaInnerClass.LambdaExpression;

public class LambdaExpression {
	
	/* 람다식(Lambda Expression)
	 * 함수형 프로그래밍과 람다식
	 * 자바는 객체지향 프로그래밍으로 기능을 수행하기 위해서 객체를 만들고 그 객체 내부에 멤버 변수를 선언하고 기능을 수행하는 메서드를 구현함
	 * 자바 8부터 함수형 프로그래밍 방식을 지원 이를 람다식이라함
	 * 함수의 구현과 호출만으로 프로그래밍이 수행되는 방식
	 * 
	 * 함수형 프로그래밍 (Functional Programming: FP)
	 * 함수형 프로그래밍은 순수함수(Pure Function)을 구현하고 호출함으로써 외부 자료에 부수적인 영향(Side Effect)를 주는 것을 방지하여 구현
	 * 순수 함수란 매개변수만을 사용하여 만드는 함수로 함수 내부에서 함수 외부에 있는 변수를 사용하지 않아 함수가 수행되더라도 외부에 영향이 없음
	 * 
	 * 특징)
	 * 함수를 기반으로 하는 프로그래밍이고 입력받는 자료 이외에 외부 자료를 사용하지 않아 여러 자료가 동시에 수행되는 병렬처리가 가능
	 * 함수형 프로그래밍은 함수의 기능이 자료에 독립적인 것을 보장
	 * 동일한 자료에 대해 동일한 결과를 보장
	 * 다양한 자료에 대해 같은 기능 수행
	 * 
	 * 람다식 문법
	 * 익명 함수 만들기
	 * 매개 변수와 매개변수를 이용한 실행문(매개변수) - > (실행문;)
	 * 두 수를 입력받아 더하는 add() 함수의 예
	 * 
	 * int add(int x, int y){
	 * 	return x+y;       
	 * }
	 * 
	 * -> 람다식으로  (int x, int y) -> {return x+y;}
	 * str -> {System.out.println(str);} // 매개변수가 하나인경우 자료형과 괄호 생략가능
	 * x, y -> {System.out.println(x+y);} // 매개변수가 2개 이상이면 이렇게 괄호 생략 불가
	 * str -> System.out.println(str);  // 실행문이 한 문장인 경우 중괄호 생략 가능
	 * str -> return str.length(); // 실행문이 한문장이여도 return문은 중괄호를 생략할 수 없음 -> 생략할거면 모두 생략하면가능
	 * (x, y) -> x+y;
	 * str -> str.length; // 실행문이 한 문장 반환인 경우 return과 중괄호를 모두 생략
	 * 
	 * 
	 * */
}
