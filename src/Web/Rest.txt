REST(Representational State Transfer : 자원의 상태 전달) - 네트워크 아키텍쳐

1. client, Server: 클라이언트와 서버가 서로 독립적으로 분리되어 있어야 함

2. Stateless : 요청에 대해서 클라이언트의 상태를 서버에 저장하지 않음

3. Cache : 클라이언트는 서버의 응답을 Cache(임시저장) 할 수 있어야함
 		   클라이언트가 Cache를 통해 응답을 재사용 할 수 있어야 하며, 이를 통해서 서버의 부하를 낮출 수 있음
 		   
4. 계층화(Layered System) : 서버와 클라이언트 사이에, 방화벽, 게이트웨이, Proxy 등 다양한 계층 형태로 구성이 가능해야함, 또한 확장이 가능해야함

5. 인터페이스 일관성 : 인터페이스의 일관성을 지키고, 아키텍처를 단순화시켜 작은 단위로 분리하여, 클라이언트, 서버가 독립적으로 개선 될 수 있어야함

6. Code on Demand(Optional) : 자바 애플릿, 자바 스크립트, 플래시 등 특정한 기능을 서버로 부터 클라이언트가 전달받아 코드를 실핼 할 수 있어야함

REST를 잘 사용 했는지 판단 기준 -> 인터페이스 일관성이 잘지켜졌는지 
1. 자원의 식별
 - 리소스 접근 시 URI 사용
 https://foo.co.kr/user/100
 Resource : user
 식별자 : 100
 
2. 메세지를 통한 리소스 조작
 - Web에서는 다양한 방식으로 데이터를 전달 할 수있음
 가장 많이 사용하는 방법으로 HTML, XML, JSON, TEXT 등이 있음
 어떠한 타입의 데이터인지를 알려주기 위해서 HTTP Header 부분에 content-type 을 통해 데이터의 타입을 지정해 줄 수 있음
 리소스 조작을 위해서 데이터 전체를 전달하지 않고 메세지로 전달
 
 - 서버의 user라는 정보의 전화번호를 처음에는 number라고 결정, 이 정보를 Client 와 주고 받을 때 
 그대로 사용하고 있었다면 후에 서버의 Resource 변경으로 phone-number로 바뀌게 된다면 client는 처리를 하지 못하고 에러가 남
 위와 같은 상황을 방지하기 위해 별도의 메세지의 형태로 데이터를 주고받음 client-server가 독립적으로 확장이 가능하도록 함

3. 자기 서술적 메시지
 - 요청하는 데이터가 어떻게 처리 되어져야 하는지 충분한 데이터를 포함 할 수 있어야한다.
 HTTP 기반의 REST에서는 HTTP Method와 Header정보, 그리고 URI의 포함되는 정보로 표현 할 수 있습니다.
 
 GET :  https://foo.co.kr/user/100 , 사용자의 정보 요청 
 POST :  https://foo.co.kr/user , 사용자 정보 생성
 PUT :   https://foo.co.kr/user , 사용자 정보 생성 및 수정
 DELETE :   https://foo.co.kr/user/100 , 사용자 정보 삭제

 그 외에 담지 못한 정보들은 URI 의 메세지를 통해 표현
   
4. 애플리케이션 상태에 대한 엔진으로써 하이퍼 미디어
REST API 를 개발 할때 단순히 Client 요청에 대한 데이터 응답 해주는 것이 아닌 관련된 리소스에 대한 Link 정보까지 같이 포함 되어져야 한다.
이러한 조건들을 잘 갖춘 경우 REST Ful하다 표현 

