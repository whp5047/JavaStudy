package JavaDataStructure;

public class DataStructure {
	
	/* 자료구조 (DataStructure) : 프로그램에서 사용할 많은 데이터를 메모리 상에서 관리하는 여러 구현 방법들
	 * 효율적인 자료구조가 성능 좋은 알고리즘의 기반이
	 * 자료의 효율적인 관리는 프로그램의 수행속도와 밀접한 관련이 있음
	 * 여러 자료 구조중에서 구현하려는 프로그램에 맞는 최적의 자료 구조를 활용해야 함 따라서 이해가 중요
	 * 
	 * 1) 선형자료 구조 : 한줄로 자료를 관리 1:1 구조
	 * 배열 (Array) : 선형으로 자료를 관리, 정해진 크기의 메모리를 먼저 할당받아 사용, 길이 1당 4byte를 가짐
	 * 자료의 물리적인 위치와 논리적 위치가 같음 < 따라서 위치만 알면 탐색이 빠름, 중간이 빌(empty)없음
	 * 산술적 연산이 가능 O(1) , 조정 시O(n)
	 * a[0] = 10; a[2] = 10 + 4 * 2 ;  
	 * 
	 * 
	 * 연결 리스트(LinkedList) : 선형으로 자료를 관리 , 접근성이 나쁨
	 * 자료가 추가될 때마다 메모리를 할당 받고, 자료는 링크로 연결됨, C언어에서 pointer개념
	 * 자료의 물리적위치와 논리적 위치가 다를 수 있음
	 * 논리적 연산 시 O(n), 조정 시 O(1) 
	 * 
	 * 이중 연결 리스트(Doubly Linked List): 노드가 한 방향을 가리키지 않음, 접근성 향상
	 * 이중 원형 연결리스트(Doubly Circular Linked List) : 노드가 끝이 null을 가리키는 것이 아닌 처음을 가르킴 
	 * 
	 * 
	 * 스택(Stack) : 가장 나중에 입력된 자료가 가장 먼저 출력되는 자료 구조(Last In First Out)
	 * 
	 * 큐(Queue) : 가장 먼저 입력된 자료가 가장 먼저 출력되는 자료 구조(First In First Out)
	 * 맨 뒤(near)에서만 추가되고 맨 앞(front)에서 꺼낼 수 있음
	 * 
	 * 
	 * 2) 비선형 자료 구조 : 1:n, n:1 방식
	 * 
	 * 트리(Tree) : 부모 노드와 자식 노드간의 연결로 이루어진 자료 구조
	 * 
	 * 힙(Heap) : Priority queue를 구현(우선 큐)
	 * Max Heap : 부모 노드는 자식 노드보다 항상 크거나 같은 값을 갖는 경우
	 * Min Heap : 부모 노드는 자식 노드보다 항상 작거나 같은 값을 갖는 경우
	 * 
	 * 이진 트리(Binary Tree) : 부모노드에 자식노드가 두개 이하인 트리 < 가장 많이 사용
	 * 
	 * 이진 검색트리(Binary Search Tree) : 검색을 목적으로 만들어짐 트리의 차수n ->  찾는데 최대 소요시간 2^n -1 ,  
	 * 자료(Key)의 중복을 허용하지 않음
	 * 왼쪽 자식 노드는 부모 노드보다 작은 값, 오른쪽 지식 노드는 부모 노드보다 큰 값을 가짐
	 * 자료 검색에 걸리는 시간이 평균 log(n)
	 * inorder traversal 탐색을 하게ㅐ되면 자료가 정렬되어 출력
	 * 
	 * JDK 클래스 : TreeSet, TreeMap(Tree로 시작되는 클래스는 정렬을 지원함)
	 * 
	 * 그래프(Graph) : 정점과 간선들을 유한 집합 G =(V,E)
	 * 정점(vertex) : 여러 특성을 가지는 객체, 노드(node)
	 * 간선(edge) : 이 객체들의 연결관계를 나타냄, 링크(link)
	 * 간선은 방향성이 있는 경우와 없는 겨우가 존재
	 * 
	 * 그래프를 구현하는 방법 : 인접행렬(Adjacency Matrix), 인접리스트(Adjacency List)
	 * 그래프를 탐색하는 방법 : BFS(Bread First Search), DFS(Depth First Search)
	 * 
	 * 해싱(Hashing) : 자료를 검색하기 위한 자료구조
	 * 키(key)에 대한 자료를 검색하기 위한 사전(Directory) 개념의 자료 구조
	 * key는 유일하고 이에대한 value를 쌍으로 저장
	 * index = h(key) : 해시 함수가 key에 대한 인덱스를 반환해줌 해당 인덱스 위치에 자료를 저장허가나 검색하게 됨
	 * 해시 함수에 의해 인덱스 연산이 산술적으로 가능 O(1)
	 * 저장되는 메모리 구조를 해시테이블이라 함
	 * JDK 클래스 : HashMap, Properties
	 * 
	 * 
	 * 
	 * 
	 * 
	 * */
}
